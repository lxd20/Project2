import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.text.DecimalFormat;
import java.text.NumberFormat;

import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;



public class Visual extends JPanel implements ChangeListener {

	
	public Game game;
	public Map map;
	String[][] layer;
	JSlider plantSlider; JTextField plantSliderText;
	JSlider preySlider; JTextField preySliderText;
	JSlider predSlider; JTextField predSliderText;

	JTextArea popText;
	JTextArea mutationText;
	JTextArea deathRatioText;
	JTextArea hw; //Hardy Weinberg  model
	NumberFormat formatter = new DecimalFormat("#0.000");
	NumberFormat df = new DecimalFormat("#0.00"); 

	JTable fitnessTable;
	public Visual(Game game1, Map map1)
	{

		
		
	
		JFrame frame = new JFrame("Biology v1.0");
		frame.setLayout(null);
		this.setSize(1017,638);
		this.setLocation(0, 0);
		frame.add(this);
		frame.setSize(1407, 638); //1017 xedge, 638 yedge
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setBackground(new Color(191,191,191));
		
		
		game = game1;
		map = map1;
		layer =  new String[200][120];
		
		popText = new JTextArea("Month " + Game.month+ "  " + "\n"  + "Prey Pop: " + map.blue.size() + "\n" + "Predator Pop: " + map.red.size());
		popText.setFont(new Font("SansSerif", Font.BOLD, 13));
		popText.setForeground(Color.BLACK);
		popText.setSize(170, 73);
		popText.setLocation(0, 520);
		popText.setEditable(false);
		popText.setBorder(null);
		popText.setBackground(new Color(191,191,191));
		popText.setBorder((BorderFactory.createCompoundBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED),  BorderFactory.createEmptyBorder(10, 10, 10, 10))));
		
		double percentage =  (double) Prey.mutationPop /( map.getPopulationPrey()*2.0)*100; //mutation percentage font set
		
		percentage = (double)Math.round(percentage * 10) / 10;
		
		
		
		hw = new JTextArea("Hardy-Weinberg Model: " + "\n" +"p²      +      2pq      +      q²      =  1" +"\n" + formatter.format(Game.ddp)+ "²  +  "  + formatter.format(Game.drp) +"  +  "+formatter.format(Game.rrp) + "²  " + " = " +formatter.format(Game.hw ));
		
		
		
		hw.setFont(new Font("SansSerif", Font.BOLD, 14));
		hw.setForeground(Color.BLACK);
		hw.setSize(280, 80);
		hw.setLocation(0, 265);
		hw.setEditable(false);
		hw.setBorder(null);
		hw.setBackground(new Color(191,191,191));
		hw.setBorder((BorderFactory.createCompoundBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED),  BorderFactory.createEmptyBorder(10, 10, 10, 10))));
		
		
		
		mutationText = new JTextArea("Mutated Allele: " + percentage + " %");
		mutationText.setFont(new Font("SansSerif", Font.BOLD, 13));
		mutationText.setForeground(Color.BLACK);
		mutationText.setSize(170, 40);
		mutationText.setLocation(0, 475);
		mutationText.setEditable(false);
		mutationText.setBorder(null);
		mutationText.setBackground(new Color(191,191,191));
		mutationText.setBorder((BorderFactory.createCompoundBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED),  BorderFactory.createEmptyBorder(10, 10, 10, 10))));
		
		
		deathRatioText = new JTextArea("Death Mutated: " + Game.deathRatioD + " %" + "\n" + "Death Normal: " + Game.deathRatioR + " %" );
		deathRatioText.setFont(new Font("SansSerif", Font.BOLD, 13));
		deathRatioText.setForeground(Color.BLACK);
		deathRatioText.setSize(170, 60);
		deathRatioText.setLocation(180, 475);
		deathRatioText.setEditable(false);
		deathRatioText.setBorder(null);
		deathRatioText.setBackground(new Color(191,191,191));
		deathRatioText.setBorder((BorderFactory.createCompoundBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED),  BorderFactory.createEmptyBorder(10, 10, 10, 10))));
		
		
		
		
		
		
		JPanel sliderPanel = new JPanel();
		sliderPanel.setSize(373,638);
		sliderPanel.setLocation(1017,0);
		sliderPanel.setBackground(new Color(191,191,191));
		sliderPanel.setLayout(null);
		
		intializeSpinners();
		createTable();
		
		
		
		sliderPanel.add(plantSlider);
		sliderPanel.add(plantSliderText);
		sliderPanel.add(preySlider);
		sliderPanel.add(preySliderText);
		sliderPanel.add(predSlider);
		sliderPanel.add(predSliderText);
		sliderPanel.add(popText);
		sliderPanel.add(mutationText);
		sliderPanel.add(deathRatioText);
		sliderPanel.add(hw);
		sliderPanel.add(fitnessTable);
		
		
		frame.add(sliderPanel);
		frame.setVisible(true);
	}
	
	
	public void createTable()
	{
		
		String columnNames[] = {"", "Reprod Rate", "Survival Rate", "Relative Fitness"};
		
		String dataValues[][]=
			{
				{"", "" ,"",""},
				{"", "Reprod Rate", "Survival Rate", "Relative Fitness"},
				{"Dom.", ""+df.format(Game.averageChildrenD), "" + df.format(Game.survivalRateD) ,""+df.format(Game.fitnessD)},
				{"Rec.", ""+df.format(Game.averageChildrenR), "" + df.format(Game.survivalRateR) ,""+df.format(Game.fitnessR)},

			};
		
		fitnessTable = new JTable(dataValues, columnNames);
		fitnessTable.setSize(370,80);
		fitnessTable.setLocation(0, 360);
		fitnessTable.setFont(new Font("SansSerif", Font.BOLD, 12));
		fitnessTable.setForeground(Color.BLACK);
		fitnessTable.setBorder(null);
		fitnessTable.setBackground(new Color(191,191,191));
		fitnessTable.getColumnModel().getColumn(0).setPreferredWidth(1);
		fitnessTable.setRowHeight(0, 10);
		fitnessTable.setBorder((BorderFactory.createCompoundBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED),  BorderFactory.createEmptyBorder(10, 10, 10, 10))));
		
		
	}
	
	
	
	public static String superscript(String str) {
	    str = str.replaceAll("0", "⁰");
	    str = str.replaceAll("1", "¹");
	    str = str.replaceAll("2", "²");
	    str = str.replaceAll("3", "³");
	    str = str.replaceAll("4", "⁴");
	    str = str.replaceAll("5", "⁵");
	    str = str.replaceAll("6", "⁶");
	    str = str.replaceAll("7", "⁷");
	    str = str.replaceAll("8", "⁸");
	    str = str.replaceAll("9", "⁹");         
	    return str;
	}

	
	public static String subscript(String str) {
	    str = str.replaceAll("0", "₀");
	    str = str.replaceAll("1", "₁");
	    str = str.replaceAll("2", "₂");
	    str = str.replaceAll("3", "₃");
	    str = str.replaceAll("4", "₄");
	    str = str.replaceAll("5", "₅");
	    str = str.replaceAll("6", "₆");
	    str = str.replaceAll("7", "₇");
	    str = str.replaceAll("8", "₈");
	    str = str.replaceAll("9", "₉");
	    return str;
	}
	
	public void intializeSpinners()
	{
		plantSliderText = new JTextField("Food Spawn Rate");
		plantSliderText.setSize(100,30);
		plantSliderText.setLocation(5, 8);
		Font myFont = new Font("SansSerif", Font.BOLD, 12);
		plantSliderText.setFont(myFont);
		plantSliderText.setEditable(false);
		plantSliderText.setBorder(null);
		plantSliderText.setBackground(new Color(191,191,191));
		plantSlider = new JSlider(JSlider.VERTICAL,0,80,2);
		plantSlider.addChangeListener(this);
		plantSlider.setMajorTickSpacing(10);
		plantSlider.setMinorTickSpacing(2);
		plantSlider.setPaintTicks(true);
		plantSlider.setPaintLabels(true);
		plantSlider.setSize(50,200);
		plantSlider.setLocation(5, 35);
		plantSlider.setBackground(new Color(191,191,191));
		plantSlider.setForeground(Color.BLACK);
		plantSlider.setValue(Game.plantSpawnRate);
		plantSlider.setName("plant");
		
		
		preySliderText = new JTextField("Prey Mate Prob");
		preySliderText.setSize(100,30);
		preySliderText.setLocation(125, 8);
		preySliderText.setFont(myFont);
		preySliderText.setEditable(false);
		preySliderText.setBorder(null);
		preySliderText.setBackground(new Color(191,191,191));
		preySlider = new JSlider(JSlider.VERTICAL,0,1000,50);
		preySlider.addChangeListener(this);
		preySlider.setMajorTickSpacing(100);
		preySlider.setMinorTickSpacing(50);
		preySlider.setPaintTicks(true);
		preySlider.setPaintLabels(true);
		preySlider.setSize(60,200);
		preySlider.setLocation(125, 35);
		preySlider.setBackground(new Color(191,191,191));
		preySlider.setForeground(Color.BLACK);
		preySlider.setValue(Prey.mateProbMax);
		preySlider.setName("Prey");
		
		
		predSliderText = new JTextField("Predator Mate Prob");
		predSliderText.setSize(140,30);
		predSliderText.setLocation(240, 8);
		predSliderText.setFont(myFont);
		predSliderText.setEditable(false);
		predSliderText.setBorder(null);
		predSliderText.setBackground(new Color(191,191,191));
		predSlider = new JSlider(JSlider.VERTICAL,0,1000,50);
		predSlider.addChangeListener(this);
		predSlider.setMajorTickSpacing(100);
		predSlider.setMinorTickSpacing(50);
		predSlider.setPaintTicks(true);
		predSlider.setPaintLabels(true);
		predSlider.setSize(60,200);
		predSlider.setLocation(240, 35);
		predSlider.setBackground(new Color(191,191,191));
		predSlider.setForeground(Color.BLACK);
		predSlider.setValue(Predator.mateProbMax);
		predSlider.setName("Predator");
		
	}
	
	public void setTable()
	{
		fitnessTable.setValueAt(""+df.format(Game.averageChildrenD), 2, 1);
		fitnessTable.setValueAt(""+df.format(Game.survivalRateD), 2, 2);
		fitnessTable.setValueAt(""+df.format(Game.fitnessD), 2, 3);
		fitnessTable.setValueAt(""+df.format(Game.averageChildrenR), 3, 1);
		fitnessTable.setValueAt(""+df.format(Game.survivalRateR), 3, 2);
		fitnessTable.setValueAt(""+df.format(Game.fitnessR), 3, 3);

		
	}
	
	
	public void paint(Graphics g)
	{
		
	
		
		super.paint(g);
		popText.setText("Month " + Game.month+ "  " + "\n"  + "Prey Pop: " + map.blue.size() + "\n" + "Predator Pop: " + map.red.size());
		mutationText.setText("Mutated Allele: " + Game.percentage + " %");
		deathRatioText.setText("Death Mutated: " + Game.deathRatioD + " %" + "\n" + "Death Normal: " + Game.deathRatioR + " %" );
		Graphics2D g2d = (Graphics2D) g;
		hw.setText("Hardy-Weinberg Model: " + "\n" +"p²      +      2pq      +      q²      =  1" +"\n" + formatter.format(Game.ddp)+ "²  +  "  + formatter.format(Game.drp) +"  +  "+formatter.format(Game.rrp) + "²  " + " = " +formatter.format(Game.hw ));
		setTable();
		
		
		
		
		
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
		layerMap(120, 320,120,240);
		
		
		
		
		
		for(int x=0; x<200;x++)
		{
			for(int y=0;y<120;y++)
			{
				if(layer[x][y] == "n")
				{
					Color color = new Color(205, 201, 201);
					g2d.setColor(color);
					g2d.fillRect(5*x, 5*y, 5, 5);
				}
				
				if(layer[x][y] == "bm")
				{
					Color color = new Color(25, 25, 112);
					g2d.setColor(color);
					g2d.fillRect(5*x, 5*y, 5, 5);
				}
				
				if(layer[x][y] == "bf")
				{
					Color color = new Color(100, 149, 237);
					g2d.setColor(color);
					g2d.fillRect(5*x, 5*y, 5, 5);
				}
				
				if(layer[x][y] == "rm")
				{
					Color color = new Color(255, 48, 48);
					g2d.setColor(color);
					g2d.fillRect(5*x, 5*y, 5, 5);
				}
				
				if(layer[x][y] == "rf")
				{
					Color color = new Color(238, 99, 99);
					g2d.setColor(color);
					g2d.fillRect(5*x, 5*y, 5, 5);
				}
				
				if(layer[x][y] == "g")
				{
					Color color = new Color(0, 139, 69);
					g2d.setColor(color);
					g2d.fillRect(5*x, 5*y, 5, 5);
				}
				if(layer[x][y] == "md")
				{
					Color color = new Color(148,0,211);
					g2d.setColor( color);
					g2d.fillRect(5*x, 5*y, 5, 5);
				}
				
				if(layer[x][y] == "fd")
				{
					Color color = new Color(205,150,205);
					g2d.setColor(color);
					g2d.fillRect(5*x, 5*y, 5, 5);
				}
			}
		}
	}
	
	public void layerMap(int x1, int x2, int y1, int y2)
	{
			
		for (int x = x1; x<x2; x++)
		{
			for(int y= y1;y<y2; y++)
			{
			//	System.out.println(y-120);

				if(map.enviroment[x][y].isEmpty())
				{
					layer[x-120][y-120] = "n";
				}
				else if(map.enviroment[x][y].get(0) instanceof Prey)
				{
					
					if(((Prey)map.enviroment[x][y].get(0)).speed)
					{
						
						if(map.enviroment[x][y].get(0).gender=="male")
						{

							layer[x-120][y-120] = "md";
						}
						else
						{
							layer[x-120][y-120] = "fd";
						}
					}
					
					
					else{
						
						if(map.enviroment[x][y].get(0).gender=="male") {
					

						layer[x-120][y-120] = "bm";

					}
						else {
							layer[x-120][y-120] = "bf";

						}
					
					}
				}
				else if(map.enviroment[x][y].get(0) instanceof Predator)
				{
					
					if(map.enviroment[x][y].get(0).gender=="male") {
						layer[x-120][y-120] = "rm";

						
					}
						else {
						layer[x-120][y-120] = "rf";

						}
										
				}
				
				else if (map.enviroment[x][y].get(0) instanceof Plant )
				{
					
				boolean noPrey = true; 
					for (Species s: map.enviroment[x][y])
					{

						if (s instanceof Prey)
						{

							if(((Prey)s).speed)
							{
								
								if(s.gender=="male")
								{

									layer[x-120][y-120] = "md";
								}
								else
								{
									layer[x-120][y-120] = "fd";
								}
							}
							
							
							else{
								
								if(s.gender=="male") {
							

								layer[x-120][y-120] = "bm";

							}
								else {
									layer[x-120][y-120] = "bf";

								}
							
							}
						}

						if (s instanceof Predator)
						{

							if(s.gender=="male") {
								layer[x-120][y-120] = "rm";}

								
							else {
								layer[x-120][y-120] = "rf";

								}
							noPrey = false; 

							break;
						}
						
					}
				if(noPrey)
				{
					layer[x-120][y-120] = "g";

				}
				
				}
				
			}
		}
		
		/*for(Prey s: map.blue)
		{
			if(s.speed)
			{
				int x = s.PosX;
				int y = s.PosY;
				if(s.gender=="male")
				{
					if(x>=x1 && y>=y1 && x<x2 && y<y2)
					{
					layer[x-120][y-120] = "md";
					}
				}
				else
				{
					if(x>=x1 && y>=y1 && x<x2 && y<y2)
					{
					layer[x-120][y-120] = "fd";
					}
				}
				
				
			}
		}*/
	}

	@Override
	public void stateChanged(ChangeEvent arg0) {
		
		
		JSlider source = (JSlider)arg0.getSource();
		if(source.getName()=="plant")
		{
		Game.plantSpawnRate= source.getValue();
		}
		if(source.getName()=="Prey")
		{
		Prey.mateProbMax = source.getValue();
		}
		if(source.getName()=="Predator")
		{
		Predator.mateProbMax = source.getValue();
		}
		
	}
	
}
